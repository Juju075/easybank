@charset "UTF-8";
/*
*
*/
/** mixing name(parametre){ coller bloc code @content contenue d'origine} */
html {
  font-size: 100%;
  box-sizing: border-box;
}

/* a voir html ou (*) */
/* box-sizing définit la façon dont la hauteur et la largeur totale d'un élément est calculé  */
*, *::before, *::after {
  box-sizing: inherit;
}

/* utilisée avec ::before et ::after afin de générer le contenu d'un élément. */
body {
  margin: 0;
  padding: 0;
  font-family: "Public Sans", sans-serif;
  font-size: 1.125rem;
  color: #9698a6;
  line-height: 1.3;
}

/* line-height définit la hauteur de la boîte d'une ligne espace entre ligne. */
a, a:visited, a:hover {
  text-decoration: none;
  color: white;
}

.flex {
  display: flex;
}
.flex-jc-sb {
  justify-content: space-between;
}
.flex-jc-c {
  justify-content: space-between;
}
.flex-ai-c {
  align-content: center;
}

button, .button {
  padding: 0.875rem 2.1875rem;
  background: linear-gradient(to right, #31d35c, #2d314d);
  border-radius: 50px;
  border: 0;
  cursor: pointer;
  color: white;
  font-weight: 700;
}

/* button, .button double selecteur
* font-weight permet de définir la graisse utilisée pour le texte
*/
/*
* Elements à afficher ou non.
* Affichage ou cacher elements
* Mobile first
*/
@media (max-width: 63.9375em) {
  .hide-for-mobile {
    display: none;
  }
}

@media (min-width: 64em) {
  .hide-for-desktop {
    display: none;
  }
}

/** @include Basecode */
.container {
  padding-top: 1.5rem;
  padding-bottom: 1.5rem;
  padding-left: 1.5rem;
  padding-right: 1.5rem;
}

/** Section */
.header {
  /** 
  * Ajoute une animation fade-in a .overlay
  * Selecteur d'element fils '>' permet de sélectionner les nœuds qui sont des fils directs 
  * d'un élément donné.
  */
  /***
  */
}
.header.open .overlay {
  display: block;
  animation: fade-in 300ms ease-in-out forwards;
}
.header.open .header__toogle > span:first-child {
  transform: rotate(45deg);
}
.header.open .header__toogle > span:nth-child(2) {
  opacity: 0;
}
.header.open .header__toogle > span:last-child {
  transform: rotate(-45deg);
}
.header .overlay {
  display: none;
  position: fixed;
  top: 3.75rem;
  right: 0px;
  bottom: 0px;
  left: 0px;
  background-color: #2d314d;
  background-image: linear-gradient(#2d314d, transparent);
  opacity: 0.3;
}
.header nav {
  padding-top: 1.0625rem;
  padding-bottom: 1.0625rem;
}
.header__logo img {
  width: 8.8125rem;
  height: 1.375rem;
}
.header__toogle > span {
  display: block;
  width: 26px;
  height: 2px;
  background-color: #2d314d;
  transition: color 200ms ease-in-out;
  transform-origin: 3px 1px;
}
.header__toogle > span:not(:last-child) {
  margin-bottom: 5px;
}
.header__menu {
  position: absolute;
  width: calc(100% - 3rem);
  left: 50%;
  transform: translateX(-50%);
  background: white;
  margin-top: 1.5rem;
  padding: 1.625rem;
  border-radius: 5px;
}
.header__menu a {
  display: block;
  color: #2d314d;
  padding: 0.625rem;
  text-align: center;
}
.header__links a {
  position: relative;
  font-size: 0.875rem;
  color: #9698a6;
  transition: color 200ms ease-in-out;
  /* 
  * cree un element qui n'existe pas dans le html
  * ::before creates a pseudo-element that is the first child of the selected element. 
  * It is often used to add cosmetic content to an element with the content property. 
  * It is inline by default.
  */
}
.header__links a:not(:last-child) {
  margin-right: 32px;
}
.header__links a::before {
  content: "";
  display: block;
  position: absolute;
  height: 5px;
  left: 0;
  right: 0;
  bottom: -30px;
  background: linear-gradient(to right, #31d35c, #2d314d);
  opacity: 0;
  transition: opacity 300ms ease-in-out;
}
.header__links a:hover {
  color: #2d314d;
}
.header__links a:hover::before {
  opacity: 1;
}
.header__cta {
  font-size: 0.875rem;
  color: white;
  transition: opacity 300ms ease-in-out;
}
.header__cta:hover {
  opacity: 0.75;
}

/**
* padding the padding area on all four sides of an element at once.
* > Combinateur fils element direct
* :not() represents elements that do not match a list of selectors.
* :last-child  represents the last element among a group of sibling elements.
*not last child css
*/
@keyframes fade-in {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}
/*@keyframes (=image cle) 
permet aux auteurs de définir les étapes qui composent la séquence d'une animation CSS. Cela permet de contrôler une animation plus finement que ce qu'on pourrait obtenir avec les transitions.
 */

/*# sourceMappingURL=style.css.map */
